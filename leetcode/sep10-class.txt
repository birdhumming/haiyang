https://www.acwing.com/activity/content/activity_person/content/29799/1/

786. 第k个数，
三数排序 - 75？

LeetCode 328. 奇偶链表
作者：    yxc ,  2020-09-10 21:27:53 ,  阅读 3

0


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (!head || !head->next) return head;
        auto oh = head, ot = oh;
        auto eh = head->next, et = eh;
        for (auto p = head->next->next; p;) {
            ot = ot->next = p;
            p = p->next;
            if (p) {
                et = et->next = p;
                p = p->next;
            }
        }
        ot->next = eh;
        et->next = NULL;
        return oh;
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/477208/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

LeetCode 329. 矩阵中的最长递增路径
作者：    yxc ,  2020-09-10 21:41:30 ,  阅读 3

0


class Solution {
public:
    int n, m;
    vector<vector<int>> f, w;
    int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};

    int dp(int x, int y) {
        auto& v = f[x][y];
        if (v != -1) return v;
        v = 1;
        for (int i = 0; i < 4; i ++ ) {
            int a = x + dx[i], b = y + dy[i];
            if (a >= 0 && a < n && b >= 0 && b < m && w[x][y] < w[a][b])
                v = max(v, dp(a, b) + 1);
        }
        return v;
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix.empty() || matrix[0].empty()) return 0;
        w = matrix;
        n = w.size(), m = w[0].size();
        f = vector<vector<int>>(n, vector<int>(m, -1));

        int res = 0;
        for (int i = 0; i < n; i ++ )
            for (int j = 0; j < m; j ++ )
                res = max(res, dp(i, j));
        return res;
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/477230/


LeetCode 327. 区间和的个数
作者：    yxc ,  2020-09-10 21:22:34 ,  阅读 5

0


typedef long long LL;

class Solution {
public:
    int m;
    vector<int> tr;
    vector<LL> numbers;

    int get(LL x) {
        return lower_bound(numbers.begin(), numbers.end(), x) - numbers.begin() + 1;
    }

    int lowbit(int x) {
        return x & -x;
    }

    void add(int x, int v) {
        for (int i = x; i <= m; i += lowbit(i)) tr[i] += v;
    }

    int query(int x) {
        int res = 0;
        for (int i = x; i; i -= lowbit(i)) res += tr[i];
        return res;
    }

    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int n = nums.size();
        vector<LL> s(n + 1);
        numbers.push_back(0);
        for (int i = 1; i <= n; i ++ ) {
            s[i] = s[i - 1] + nums[i - 1];
            numbers.push_back(s[i]);
            numbers.push_back(s[i] - lower);
            numbers.push_back(s[i] - upper - 1);
        }
        sort(numbers.begin(), numbers.end());
        numbers.erase(unique(numbers.begin(), numbers.end()), numbers.end());
        m = numbers.size();
        tr.resize(m + 1);

        int res = 0;
        add(get(0), 1);
        for (int i = 1; i <= n; i ++ ) {
            res += query(get(s[i] - lower)) - query(get(s[i] - upper - 1));
            add(get(s[i]), 1);
        }

        return res;
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/477194/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

LeetCode 326. 3的幂
作者：    yxc ,  2020-09-10 21:08:09 ,  阅读 2

0


class Solution {
public:
    bool isPowerOfThree(int n) {
        return n > 0 && 1162261467 % n == 0;
    }
};


LeetCode 324. 摆动排序 II
作者：    yxc ,  2020-09-10 21:04:23 ,  阅读 5

0


class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        int n = nums.size();
        auto midptr = nums.begin() + n / 2;
        nth_element(nums.begin(), midptr, nums.end());
        int mid = *midptr;

        #define A(i) nums[(i * 2 + 1) % (n | 1)]

        for (int i = 0, j = 0, k = n - 1; i <= k;) {
            if (A(i) > mid) swap(A(i ++ ), A(j ++ ));
            else if (A(i) < mid) swap(A(i), A(k -- ));
            else i ++ ;
        }
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/477154/


//0-1 背包问题 - 隐藏


class Solution {
public:
    int coinChange(vector<int>& coins, int m) {
        vector<int> f(m + 1, 1e8);
        f[0] = 0;
        for (auto v: coins)
            for (int j = v; j <= m; j ++ )
                f[j] = min(f[j], f[j - v] + 1);
        if (f[m] == 1e8) return -1;
        return f[m];
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/477128/


LeetCode 321. 拼接最大数
作者：    yxc ,  2020-09-10 20:44:41 ,  阅读 7

0


class Solution {
public:
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        int n = nums1.size(), m = nums2.size();
        vector<int> res(k, INT_MIN);
        for (int i = max(0, k - m); i <= min(k, n); i ++ ) {
            auto a = maxArray(nums1, i);
            auto b = maxArray(nums2, k - i);
            auto c = merge(a, b);
            res = max(res, c);
        }
        return res;
    }

    vector<int> merge(vector<int>& a, vector<int>& b) {
        vector<int> c;
        while (a.size() && b.size())
            if (a > b) c.push_back(a[0]), a.erase(a.begin());
            else c.push_back(b[0]), b.erase(b.begin());
        while (a.size()) c.push_back(a[0]), a.erase(a.begin());
        while (b.size()) c.push_back(b[0]), b.erase(b.begin());
        return c;
    }

    vector<int> maxArray(vector<int>& nums, int k) {
        vector<int> res(k);
        int n = nums.size();
        for (int i = 0, j = 0; i < nums.size(); i ++ ) {
            int x = nums[i];
            while (j && res[j - 1] < x && j + n - i > k) j -- ;
            if (j < k) res[j ++ ] = x;
        }
        return res;
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/477115/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


LeetCode 300. 最长上升子序列
作者：    yxc ,  2020-08-27 21:40:01 ,  阅读 61

1


class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> q;
        for (auto x: nums) {
            if (q.empty() || x > q.back()) q.push_back(x);
            else {
                if (x <= q[0]) q[0] = x;
                else {
                    int l = 0, r = q.size() - 1;
                    while (l < r) {
                        int mid = l + r + 1 >> 1;
                        if (q[mid] < x) l = mid;
                        else r = mid - 1;
                    }
                    q[r + 1] = x;
                }
            }
        }
        return q.size();
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/456581/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

LeetCode 319. 灯泡开关
作者：    yxc ,  2020-09-10 20:27:46 ,  阅读 3

0


class Solution {
public:
    int bulbSwitch(int n) {
        return sqrt(n);
    }
};


LeetCode 318. 最大单词长度乘积
作者：    yxc ,  2020-09-10 20:22:31 ,  阅读 6

1


class Solution {
public:
    int maxProduct(vector<string>& words) {
        vector<int> state;
        for (auto word: words) {
            int s = 0;
            for (auto c: word)
                s |= 1 << (c - 'a');
            state.push_back(s);
        }

        int res = 0;
        for (int i = 0; i < words.size(); i ++ )
            for (int j = i + 1; j < words.size(); j ++ )
                if ((state[i] & state[j]) == 0)
                    res = max(res, (int)(words[i].size() * words[j].size()));
        return res;
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/477075/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

LeetCode 316. 去除重复字母
作者：    yxc ,  2020-09-10 20:16:02 ,  阅读 10

1


class Solution {
public:
    string removeDuplicateLetters(string s) {
        string stk;
        unordered_map<char, bool> ins;
        unordered_map<char, int> last;
        for (int i = 0; i < s.size(); i ++ ) last[s[i]] = i;

        for (int i = 0; i < s.size(); i ++ ) {
            if (ins[s[i]]) continue;
            while (stk.size() && stk.back() > s[i] && last[stk.back()] > i) {
                ins[stk.back()] = false;
                stk.pop_back();
            }
            stk += s[i];
            ins[s[i]] = true;
        }

        return stk;
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/477064/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

LeetCode 315. 计算右侧小于当前元素的个数
作者：    yxc ,  2020-09-06 21:44:16 ,  阅读 34

1


class Solution {
public:
    int n = 20001;
    vector<int> tr;

    int lowbit(int x) {
        return x & -x;
    }

    int query(int x) {
        int res = 0;
        for (int i = x; i; i -= lowbit(i)) res += tr[i];
        return res;
    }

    void add(int x, int v) {
        for (int i = x; i <= n; i += lowbit(i)) tr[i] += v;
    }

    vector<int> countSmaller(vector<int>& nums) {
        tr.resize(n + 1);
        vector<int> res(nums.size());
        for (int i = nums.size() - 1; i >= 0; i -- ) {
            int x = nums[i] + 10001;
            res[i] = query(x - 1);
            add(x, 1);
        }
        return res;
    }
};

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/471123/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。