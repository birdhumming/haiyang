toutiao
830 905 2470


https://www.acwing.com/blog/content/17/
https://www.acwing.com/blog/content/20/
https://www.acwing.com/blog/content/26/

836

AcWing 836. 合并集合    原题链接    简单
作者：    goontry ,  2019-06-08 09:58:35 ,  阅读 1229

8


1
题目描述
解读yxc。
这个问题，主要搞懂以下几个问题？

递归的含义？
p[N]的含义？
解答
类比高中学到的通项公式的求法；
p[N]，在此表示每个节点的父节点；及在进行find之后，该节点对应的祖先节点。
C++ 代码
#include <iostream>
using namespace std;

const int N = 1e5 + 10;
int p[N]; // 当前节点的父节点；

// 该函数的含义：查找a所在集合的祖先节点下标，从1开始, 并内部更新p[a]为a节点的祖先节点。
int find(int a)
{
    // 根据通项公式，假设p[a]的祖先节点已知。
    if (p[a] != a) p[a] = find(p[a]);
    return p[a];
}

int main()
{
    int n, m;
    scanf("%d %d", &n, &m);

    // 初始化每个集合
    for (int i = 1; i <= n; i++) p[i] = i;

    int a, b;
    char op[2];
    while (m--)
    {
        scanf("%s%d%d", op, &a, &b);
        if (op[0] == 'M') p[find(a)] = find(b);
        else {
            if (find(a) == find(b)) puts("Yes");
            else puts("No");
        }
    }
    return 0;
}

作者：goontry
链接：https://www.acwing.com/solution/content/2396/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


AcWing 830. 单调栈    原题链接    简单
作者：    wuog ,  2019-08-06 09:21:59 ,  阅读 1483

4


3
题目描述
给定一个长度为N的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出-1。

输入格式
第一行包含整数N，表示数列长度。

第二行包含N个整数，表示整数数列。

输出格式
共一行，包含N个整数，其中第i个数表示第i个数的左边第一个比它小的数，如果不存在则输出-1。

数据范围
1≤N≤105
1≤数列中元素≤109

样例
输入样例：
5
3 4 2 7 5
输出样例：
-1 3 -1 2 2
算法1
(模拟)
C++ 代码
#include<iostream>
using namespace std;
const int N=100010;
int s[N],tt;
int n;
int main(){
    cin>>n;
   for(int i=0;i<n;i++)
   {
        int x;
        cin>>x;
        while(tt&&s[tt]>=x)tt--;
        if(tt)cout<<s[tt]<<" ";
        else cout<<"-1"<<" ";
        s[++tt]=x;

    }
    return 0;
}
算法2
(STL) O(n)O(n)
C++ 代码
#include<iostream>
#include<vector>
#include<stack>

using namespace std;
const int N=100010;

int n;
int a[N];
stack<int>stk;


int main() {
    cin.tie(0);
    ios::sync_with_stdio(false);
    cin >> n;

    for (int i = 0; i < n; ++i) {
        int s; cin >> s;
        while (!stk.empty() && s <= stk.top())stk.pop();
        a[i] = stk.empty() ? -1 : stk.top();
        stk.push(s);
    }
    for (int i=0;i<n;i++)cout <<a[i]<< " ";
    cout << endl;
    return 0;
}


作者：wuog
链接：https://www.acwing.com/solution/content/3481/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


AcWing 905. 区间选点    原题链接    简单
作者：    松鼠爱葡萄 ,  2020-07-24 10:06:04 ,  阅读 117

8


3
算法分析
将每个区间按照右端点从小到大进行排序

从前往后枚举区间，end值初始化为无穷小

如果本次区间不能覆盖掉上次区间的右端点， range[i].l > ed

说明需要选择一个新的点， res ++ ; ed = range[i].r;



如果本次区间可以覆盖掉上次区间的右端点，则进行下一轮循环
时间复杂度 O(nlogn)O(nlogn)
证明
证明ans<=cnt ：cnt 是一种可行方案， ans是可行方案的最优解，也就是最小值。

证明ans>=cnt ： cnt可行方案是一个区间集合，区间从小到大排序，两两之间不相交。

所以覆盖每一个区间至少需要cnt个点。

#include <iostream>
#include <algorithm>

using namespace std;

const int N = 100010;

int n;
struct Range
{
    int l, r;
    bool operator< (const Range &W)const
    {
        return r < W.r;
    }
}range[N];

int main()
{
    scanf("%d", &n);
    for (int i = 0; i < n; i ++ ) scanf("%d%d", &range[i].l, &range[i].r);

    sort(range, range + n);

    int res = 0, ed = -2e9;
    for (int i = 0; i < n; i ++ )
        if (range[i].l > ed)
        {
            res ++ ;
            ed = range[i].r;
        }

    printf("%d\n", res);

    return 0;
}

作者：松鼠爱葡萄
链接：https://www.acwing.com/solution/content/16905/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


AcWing 905. 区间选点    原题链接    简单
作者：    优雅的瑞尔 ,  2019-07-25 12:46:25 ,  阅读 1019

6


1
原题传送门
类似题传送门（代码相同）
题目描述
给定N个闭区间[ai,bi]，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。

输出选择的点的最小数量。

位于区间端点上的点也算作区间内。

输入格式
第一行包含整数N，表示区间数。

接下来N行，每行包含两个整数ai,bi，表示一个区间的两个端点。

输出格式
输出一个整数，表示所需的点的最小数量。

数据范围
1≤N≤105,
−109≤ai≤bi≤109

思路
读到这题，先考虑暴力。结果发现这范围大得一塌糊涂，很快就被卡了。可知行不通，必须优化。

我们可以想到，当一个数上有点时，包含这个数的区间都会被满足。因此，我们在推理时，应尽可能“一箭多雕”。

接着，我们的目标就转化为“如何尽可能完美地放点”。一个区间，若放较前，则无法顾及后面；若放较后，则无法顾及前面。既然如此，我们就应该有规律地放（从前往后或从后往前，此处讲从前往后）。故先要储存，排序。

要排序，就得有关键字。关键字分为二：1.起点、2.终点。若以起点为关键字，我们就不知道点该尽量往哪放。既然从前往后，理应尽量往后放，因为其他区间都在自己后面。可万一有一个区间起点在自己之后，终点在自己之前，那么它就会被巧妙地避开，最后WA。

所以，我们要以终点为关键字。这样，我们只要将点放在终点的数上就能将尽可能多的区间满足。

步骤
1、输入;
2、储存;
3、排序;
4、处理;
5、输出。

参考代码(C++)
#include<bits/stdc++.h>
using namespace std;

struct body{  //  储存区间;
    int z,y,me;
    //  me  区间的序号;
}s[100000+10];
int zw[100000+10];
//  zw[]  排好了的区间序号;
int p[100000+10];
//  p[]  判断区间是否满足;
int y[100000+10];
//  y[]  排好了的区间终点;
bool empy(body a,body b){  //  终点排序;
    return a.y<b.y;
}
bool empx(body a,body b){  //  起点排序;
    return a.z<b.z;
}
int main(){
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        scanf("%d%d",&s[i].z,&s[i].y);
        s[i].me=i;
    }  //  输入&&储存;
    sort(s+1,s+1+n,empy);  //  终点排序;
    for(int i=1;i<=n;i++){
        y[i]=s[i].y;
        zw[i]=s[i].me;
    }  //  储存起来;
    sort(s+1,s+1+n,empx);
    int z=1,ans=0;
    for(int i=1;i<=n;i++){
        if(p[zw[i]]) continue;  //  若已满足，则next;
        while(z<=n&&y[i]>=s[z].z){  //  范围内&&可满足;
            p[s[z].me]=1;
            ++z;
        }
        ++ans;
        if(z>n) break;
    }
    printf("%d",ans);
    return 0;
}

作者：优雅的瑞尔
链接：https://www.acwing.com/solution/content/3047/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



2470. 射气球
   题目
   提交记录
   讨论
   题解
   视频讲解

在一个二维空间内有 n 个球形的气球。

已知每个气球在水平方向上的直径的开始坐标 xstart 和结束坐标 xend。

一个气球的开始坐标总是小于结束坐标。

我们可以沿着 x 轴从任意点完全垂直地射出弓箭。

如果我们在坐标 x 处射出一支箭，则所有直径的开始和结束坐标满足 xstart<x<xend 的气球都将被射爆。

请问，想要将所有气球都射爆，至少要射出多少箭？

输入格式
第一行包含整数 n。

接下来 n 行，每行包含两个整数，表示一个气球的直径的开始坐标 xstart 和结束坐标 xend。

输出格式
输出一个整数，表示最少需要射出的箭的数量。

数据范围
1≤n≤105,
1≤xstart<xend≤109
输入样例：
4
1 7
5 8
10 15
13 16
输出样例：
2
样例解释
在 x=6 处射出一支箭，可以射爆前两个气球，在 x=14 处射出一支箭，可以射爆后两个气球。


LeetCode 452 射气球问题

Aldenn 2017-10-30 19:37:03  664  收藏
分类专栏： c++ 算法 文章标签： leetcode
版权
There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it’s horizontal, y-coordinates don’t matter and hence the x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 104 balloons.

An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend bursts by an arrow shot at x if xstart ≤ x ≤ xend. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons.

Input:
[[10,16], [2,8], [1,6], [7,12]]

Output:
2

Explanation:
One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).

思路：先对区间中的大的值进行排序，然后从第i个元素开始，往下遍历，直到第j个元素的min值大于i的max值，那么cout++,再从i=j开始往后寻找下一个j，以此类推。

class Solution {
public:
    int findMinArrowShots(vector<pair<int, int>>& points) {
        int re=0,arrow = INT_MIN;
        sort(points.begin(),points.end(),mysort);
        for(int i=0;i<points.size();i++)
        {
            if(arrow!=INT_MIN && points[i].first<=arrow){continue;} 
            arrow = points[i].second; // new arrow shot the end of points[i]
            re++;
        }
        return re;
    }

    static bool mysort(pair<int, int>& a, pair<int, int>& b){
        return a.second==b.second?a.first<b.first:a.second<b.second;
    }
};

https://blog.csdn.net/weixin_44176696/article/details/105046628
