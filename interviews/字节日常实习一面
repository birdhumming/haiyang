字节日常实习一面
coorch的头像coorch
3小时前
视频面，下午3点开始，时间45分钟。
第一次用牛客的系统，本来提前进去了，等到时间了发现面试官一直没进来；然后面试官给我打了电话，问我知不知道现在面试，尴尬😅。
之后把那个界面刷新一下就好了。
首先是自我介绍，介绍差不多，面试官说可以了，简历已经看完了。
然后直接开始做题，一共两道算法题。

算法部分
第一题
用两个栈实现队列
剑指offer原题，AcWing上的第20题。
思路就是一个栈用来实现入队，另一个栈来实现出队。
不要求跑通，边写边讲思路，很快就写出来了。

第二题
acwing1612. 最大正方形
一开始没什么思路，后来面试官提示，先考虑一维的情况；
一维的时候就是 Leetcode45 最大连续1的个数
想到用动态规划的方法来解；然后类推到二维的情况，最后面试官就让把状态转移方程写出来就好。

基础知识
TCP和UDP
进程、线程、协程这些
最后问机器学习的模型如何判断其性能。讲到了交叉熵和AUC。

一面结束后不到一小时，hr来商量二面的时间，让我多准备一下CS基础和机器学习基础，可能是自己在这部分答得确实不太好。

https://blog.csdn.net/ai2000ai/article/details/104125442

coroutine

https://juejin.im/post/6844903607892967432
进程、线程和协程的概念
线程 协程 进程
进程
进程是系统资源分配的最小单位, 系统由一个个进程(程序)组成 一般情况下，包括文本区域（text region）、
数据区域（data region）和堆栈（stack region）。

文本区域存储处理器执行的代码
数据区域存储变量和进程执行期间使用的动态分配的内存；
堆栈区域存储着活动过程调用的指令和本地变量。
因此进程的创建和销毁都是相对于系统资源,所以是一种比较昂贵的操作。 进程有三个状态:

等待态：等待某个事件的完成；
就绪态：等待系统分配处理器以便运行；
运行态：占有处理器正在运行。
进程是抢占式的争夺CPU运行自身,而CPU单核的情况下同一时间只能执行一个进程的代码,但是多进程的实现则是通过CPU飞快的切换不同进程,因此使得看上去就像是多个进程在同时进行.

通信问题:    由于进程间是隔离的,各自拥有自己的内存内存资源, 因此相对于线程比较安全, 所以不同进程之间的数据只能通过 IPC(Inter-Process Communication) 进行通信共享.

线程
线程属于进程
线程共享进程的内存地址空间
线程几乎不占有系统资源 通信问题:   进程相当于一个容器,而线程而是运行在容器里面的,因此对于容器内的东西,线程是共同享有的,因此线程间的通信可以直接通过全局变量进行通信,但是由此带来的例如多个线程读写同一个地址变量的时候则将带来不可预期的后果,因此这时候引入了各种锁的作用,例如互斥锁等。
同时多线程是不安全的,当一个线程崩溃了,会导致整个进程也崩溃了,即其他线程也挂了, 但多进程而不会,一个进程挂了,另一个进程依然照样运行。

进程是系统分配资源的最小单位
线程是CPU调度的最小单位
由于默认进程内只有一个线程,所以多核CPU处理多进程就像是一个进程一个核心
线程和进程的上下文切换
进程切换分3步:

切换页目录以使用新的地址空间
切换内核栈
切换硬件上下文
而线程切换只需要第2、3步,因此进程的切换代价比较大

协程
协程是属于线程的。协程程序是在线程里面跑的，因此协程又称微线程和纤程等
协没有线程的上下文切换消耗。协程的调度切换是用户(程序员)手动切换的,因此更加灵活,因此又叫用户空间线程.
原子操作性。由于协程是用户调度的，所以不会出现执行一半的代码片段被强制中断了，因此无需原子操作锁。
协程的实现：迭代器和生成器
迭代器： 实现了迭代接口的类,接口函数例如:current,key,next,rewind,valid。迭代器最基本的规定了对象可以通过next返回下一个值，而不是像数组，列表一样一次性返回。语言实现：在Java的foreach遍历迭代器对(数组)，Python的for遍历迭代器对象(tuple，list，dist)。
生成器： 使用 yield 关键字的函数,可以多次返回值，生成器实际上也算是实现了迭代器接口(协议)。即生成器也可通过next返回下一个值。
协程举例：在Python中，使用了yield的函数为生成器函数，即可以多次返回值。则生成器可以暂停一下，转而执行其他代码，再回来继续执行函数往下的代码。