AcWing 727. 菱形    原题链接    简单
作者：    小张同学 ,  2020-02-19 16:25:06 ,  阅读 507

23


10
y总优雅做法
别着急做题！先去找图形特点！这其实是个正方形！
abs(sx - i) + abs(sy - j) <= n / 2
#include <iostream>
#include <algorithm>

using namespace std;

int main()
{
    int n;
    cin >> n;

    int sx = n / 2, sy = n / 2;

    for (int i = 0; i < n ; i ++ )
    {
        for (int j = 0; j < n; j ++ )
        {
            if ( abs(sx - i) + abs(sy - j) <= n / 2 ) cout << "*";
            else cout << " ";
        }
        cout << endl;    
    }

    return 0;
}

第三次做法(依旧是陆同学的想法) 可以把上下三角形合并，直接出菱形
int x = n / 2;
for (int i = -x; i <= x; i ++ )
    {
        for (int j = 0; j < abs(i); j ++ ) cout <<' ';
        for (int j = 0; j < n - abs(i) * 2; j ++ ) cout << '*';
        puts("");
    }
第二次做法(陆同学的想法) 去找行号 和 空格&星号 的关系,输出上下三角形
int x = n / 2;

for (int i = 0; i < x; i ++)
{
    for (int j = 0; j < x - i; j ++ ) cout <<' ';
    for (int j = 0; j < 2 * i + 1; j ++  ) cout << '*';
    puts("");
}

for (int i = 0; i < n - x; i ++ )
{
    for (int j = 0; j < i; j ++ ) cout << ' ';
    for (int j = 0; j < n - 2 * i; j ++ ) cout << '*';
    puts("");
}
个人第一次做法，想老半天，我简直蠢到家了
#include<iostream>
#include<cstdio>

using namespace std;

int main()
{
    int n;
    cin >> n;
    int x = n / 2;

    char s[n][n];

    // 输入空格
    for (int i = 0; i < n; i ++ )
        for (int j = 0; j < n; j ++ )
            s[i][j] = ' ' ;

    // 上半部分
    for (int i = 0; i < x; i ++ )
        for (int j = x - i; j <= x + i; j ++ )
            s[i][j] = '*';

    // 中间一行  
    for (int j = 0; j < n; j ++ )
        s[x][j] = '*';

    // 下半部分
    for (int i = x + 1; i < n; i ++ )
        for (int j = i - x; j < n - i + x; j ++ )
            s[i][j] = '*';

    // 输出
    for (int i = 0; i < n; i ++ )
    {
        for (int j = 0; j < n; j ++ )
            cout << s[i][j] ;
        cout << endl;
    }

    return 0;
}

作者：小张同学
链接：https://www.acwing.com/solution/content/8774/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

AcWing 845. 八数码【BFS/康托展开】    原题链接    困难
作者：    滑稽_ωﾉ ,  2019-06-16 23:26:10 ,  阅读 1854

24


10
题目描述
在一个3×3的网格中，1~8这8个数字和一个“X”恰好不重不漏地分布在这3×3的网格中。

例如：

1 2 3
X 4 6
7 5 8
在游戏过程中，可以把“X”与其上、下、左、右四个方向之一的数字交换（如果存在）。

我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：

1 2 3
4 5 6
7 8 X
例如，示例中图形就可以通过让“X”先后与右、下、右三个方向的数字交换成功得到正确排列。

交换过程如下：

1 2 3      1 2 3      1 2 3      1 2 3
X 4 6  ->  4 X 6  ->  4 5 6  ->  4 5 6
7 5 8      7 5 8      7 X 8      7 8 X
现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。

输入样例：
2  3  4  1  5  x  7  6  8 
输出样例：
19
分析
本题求最少步数，所以应当用bfs来做

首先定义一个能表示矩阵状态的结构体，每次把由当前状态更新的合法的新状态压入队列

如果状态为目标状态，那么返回步数，如果更新不到目标状态，返回-1

我们可以想到，这个3*3的矩阵可以表示为一个长度为9的字符串

但是我们知道，bfs需要把遍历过的状态标记，以防止死循环

那么，如何开辟一个数组
使得这个数组中的元素，能够和矩阵的所有状态（长度为9的字符串的全排列）一一对应
这才是难点
全排列哈希
我们熟知的数一般都是常进制数，所谓常进制数就是该数的每一位都是常数进制的

kk进制数上的每一位都逢kk进一，第ii位的位权是kiki
这里要介绍一种变进制数，用来表示字符串的排列状态

这种数的第ii位逢ii进一，第ii位的位权是i!i!
用d[i]d[i]来表示一个变进制数第ii位上的数字

一个nn位变进制数的值就为∑n−1i=0∑i=0n−1 d[i]×i!d[i]×i!
这是一个最大的9位变进制数

876543210
它对应的十进制数为

8 × 8! + 7 × 7! + 6 × 6! + …… + 1 × 1! + 0 × 0! = 9! - 1 = 362879
我们可以找到一个9位变进制数，与一个9位无重复串的某种排列一一对应

用d[i]d[i]表示字符串中的第ii位与其前面的字符组成的逆序对个数

字符串的一种排列对应的变进制数的值为∑n−1i=0∑i=0n−1 d[i]×i!d[i]×i!
这是字符串123x46758的与d[i]d[i]的对应关系

  i     0 1 2 3 4 5 6 7 8
s[i]    1 2 3 x 4 6 7 5 8
d[i]    0 0 0 0 1 1 1 3 1
它对应的变进制数的值为

1 × 4! + 1 × 5! + 1 × 6! + 3 × 7! + 1 × 8! = 56304
因此可以用以下函数求字符串的一种排列对应的哈希值

int permutation_hash(char s[], int n)       //求长度为n的字符串某种排列的哈希值
{
    int ans = 0;
    for(int i = 0; i < n; i ++)
    {
        int d = 0;
        for(int j = 0; j < i; j ++)
            if(s[j] > s[i])  d ++;          //求s[i]与其前面的字符组成的逆序对个数
        ans += d * fact[i];
    }
    return ans;
}
n不能太大，通常不超过12，否则会溢出
时间复杂度为O(n²)
全排列哈希 + BFS
C++ 代码
#include<cstring>
#include<iostream>
#include<queue>
using namespace std;

int fact[9];
bool vis[362880];

int permutation_hash(char s[])          //求长度为9的字符串某种排列的哈希值
{
    int ans = 0;
    for(int i = 0; i < 9; i ++)
    {
        int d = 0;
        for(int j = 0; j < i; j ++)
            if(s[j] > s[i])  d ++;      //求s[i]与其前面的字符组成的逆序对个数
        ans += d * fact[i];
    }
    return ans;
}

typedef struct{
    char s[10];
    int step;
    int k;          //'x'在第k位
}Point;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = { 0,-1, 0, 1};
int bfs(Point p)
{
    vis[permutation_hash(p.s)] = true;
    queue<Point> q;
    q.push(p);
    while(!q.empty())
    {
        p = q.front();
        q.pop();
        /*
        printf("%d ",p.step);       //print调试法
        puts(p.s);
        */
        if(!strcmp(p.s , "12345678x"))  return p.step;

        int x = p.k / 3;      //'x'的行数
        int y = p.k % 3;      //'x'的列数
        Point next;
        next.step = p.step + 1;
        for(int i = 0; i < 4; i ++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx >= 0 && nx <= 2 && ny >= 0 && ny <= 2)
            {
                next.k = nx * 3 + ny;           //求出'x'在字符串中的的新位置

                strcpy(next.s, p.s);
                next.s[9] = 0;
                next.s[p.k] = p.s[next.k];      //先用即将和'x'交换的字符覆盖'x'之前的位置
                next.s[next.k] = 'x';           //再给'x'的新位置赋值'x'

                int hash = permutation_hash(next.s);
                if(!vis[hash])
                {
                    vis[hash] = true;
                    q.push(next);
                }
            }
        }
    }
    return -1;
}

int main()
{
    fact[0] = 1;
    for(int i = 1; i < 9; i ++)  fact[i] = fact[i - 1] * i;    //预处理fact[i] = i!

    char c[2],str[10];
    Point start;
    for(int i = 0; i < 9; i ++)
    {
        scanf("%s",&c);
        if(c[0] == 'x')  start.k = i;
        start.s[i] = c[0];
    }
    start.s[9] = 0;
    start.step = 0;
    printf("%d",bfs(start));
    return 0;
}

作者：滑稽_ωﾉ
链接：https://www.acwing.com/solution/content/2481/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


AcWing 853. 有边数限制的最短路    原题链接    简单
作者：    whsstory ,  2019-10-05 20:17:33 ,  阅读 665

7


没想到“最多经过k条边”恰恰符合Bellman-Ford的性质。。wtcl

先是想到二分最短距离，然后求最小的边数与k比较，但由于并不是经过边数最少就是最短的，所以我设f[u][pk]:1->u，恰经过pk条边的最短距离，用bfs实现最后求出minmin{dis[n][pk]|pk∈[0,k]dis[n][pk]|pk∈[0,k]}，然后。。就不用二分了

Q：时间复杂度？
A：。。其实我也不是很确定，一开始想状态是O(n2)O(n2)个，那复杂度也就O(n2)O(n2),但写完之后发现。。这咋跟SPFA似的。。
于是时间复杂度就变成玄学了（可见代码）

#include<iostream>
#include<cstdio>
#include<queue>
#include<cstring>
typedef int ll;
typedef std::pair<ll,ll> pll;
#define MAXN 511
#define MAXM 10011
struct Edge
{
    ll v,w,nxt;
}e[MAXM];
ll cnt=0,last[MAXN];
void adde(ll u,ll v,ll w)
{
    ++cnt;
    e[cnt].v=v,e[cnt].w=w;
    e[cnt].nxt=last[u];last[u]=cnt;
}

ll n,m,k,dis[MAXN][MAXN];
bool inq[MAXN][MAXN];
std::queue<pll>q;
void bfs(ll s)
{
    memset(dis,0x3f,sizeof dis);
    dis[s][0]=0;
    q.push(pll(s,0));
    while(!q.empty())
    {
        ll u=q.front().first,pk=q.front().second;q.pop();
        inq[u][pk]=0;
        if(pk>=k)continue;
        for(ll i=last[u];i;i=e[i].nxt)
        {
            ll v=e[i].v;
            if(dis[v][pk+1]>dis[u][pk]+e[i].w)
            {
                dis[v][pk+1]=dis[u][pk]+e[i].w;
                if(!inq[v][pk+1])
                {
                    inq[v][pk+1]=1;
                    q.push(pll(v,pk+1));
                }
            }
        }
    }
}
int main()
{
    scanf("%d%d%d",&n,&m,&k);
    for(ll i=1;i<=m;++i)
    {
        ll u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        adde(u,v,w);
    }
    bfs(1);
    ll ans=0x3f3f3f3f;
    for(ll i=0;i<=k;++i)ans=std::min(ans,dis[n][i]);
    if(ans==0x3f3f3f3f)puts("impossible");
    else printf("%d\n",ans);
    return 0;
}

作者：whsstory
链接：https://www.acwing.com/solution/content/5090/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。