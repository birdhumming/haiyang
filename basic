作者：CYa搜索DP中
链接：https://www.acwing.com/file_system/file/content/whole/index/content/1337042/

https://www.acwing.com/file_system/file/content/whole/index/content/1337130/

DP https://www.acwing.com/file_system/file/content/whole/index/content/1336954/

图论和搜索【Py3模板】
https://www.acwing.com/file_system/file/content/whole/index/content/1336883/

字节跳动广告技术部-广告算法凉经
https://www.acwing.com/file_system/file/content/whole/index/content/1339859/
算法题
//扭转后的有序数组，找到指定的数，返回下标，找不到时返回-1
//样例输入：3，4，5，6，7，1，2 查找数字7
//样例输出：4
算法题
有个数组，寻找一个切分点，使左右两个数组的方差差距最小
min abs（a-b）
算法题
二叉树之字形遍历
进程和线程的区别
你了解什么深度学习的优化器
如何抑制过拟合
LR的损失函数，推导一下
为什么会产生梯度消失和梯度爆炸，如何解决？


BFS 模板存档（NOI官网例题 电梯）

```
#include<bits/stdc++.h>
using namespace std;
int main()
{   
    //bfs
    int n,st,en,a[205],d[205][3],bz[205],c[2]={-1,1};
    scanf("%d%d%d",&n,&st,&en);
    if(st == en)
    {
        printf("%d",0);
        return 0;
    }

    memset(d,0,sizeof(d));
    memset(bz,0,sizeof(bz));

    for(int i=1;i<=n;i++) scanf("%d",&a[i]);

    d[1][1] = st; //楼层
    d[1][2] = 0; //到达这一层要的步数
    bz[st] = 1;

    int i=0,j=1;
    while(i<j)
    {
        i++;
        for(int t = 0;t<=1;t++)
        {
            int k = d[i][1]+a[d[i][1]]*c[t];
            if(k>=1 && k<=n)
            {
                j++;
                d[j][1] = k;
                d[j][2] = d[i][2]+1;
                if(bz[k] == 0)
                {
                    bz[k] =1;
                    if(k == en)
                    {
                        printf("%d",d[j][2]);
                        return 0;
                    }
                }
                else j--; 
            }
        }
    }
    printf("%d",-1);
    return 0;
}
```

算法
(二分) O(logn)O(logn)
这道题目给定的是递增数组，假设数组中第一个缺失的数是 xx，那么数组中的数如下所示；


从中可以看出，数组左边蓝色部分都满足nums[i] == i，数组右边橙色部分都不满足nums[i] == i，因此我们可以二分出分界点 xx 的值。

另外要注意特殊情况：当所有数都满足nums[i] == i时，表示缺失的是 nn。

时间复杂度分析
二分中的迭代只会执行 O(logn)O(logn) 次，因此时间复杂度是 O(logn)O(logn)。

C++ 代码
```
class Solution {
public:
    int getMissingNumber(vector<int>& nums) {
        if (nums.empty()) return 0;

        int l = 0, r = nums.size() - 1;
        while (l < r)
        {
            int mid = l + r >> 1;
            if (nums[mid] != mid) r = mid;
            else l = mid + 1;
        }

        if (nums[r] == r) r ++ ;
        return r;
    }
};
```

AcWing 67. 三种stl方法：multiset、遍历vector、lower/upper_bound函数    原题链接    简单
作者：    醉生梦死 ,  2020-07-11 11:15:54 ,  阅读 129

7


题目描述
求一个排好序的数组中k的个数

解题思路
目的是练习stl和常用的库函数

题解一：使用有序多重集合multiset
```
class Solution {
public:
    int getNumberOfK(vector<int>& nums , int k) {
        multiset<int> s;

        for(int x : nums) s.insert(x);

        return s.count(k);
    }
};
```
题解二：遍历vector，计数
```
class Solution {
public:
    int getNumberOfK(vector<int>& nums , int k) {
        int cnt = 0;
        for(int x : nums)
            if(x == k)
                cnt++;
        return cnt;
    }
};
```
题解三：使用lower_bound和upper_bound,指针运算得出次数
```
class Solution {
public:
    int getNumberOfK(vector<int>& nums , int k) {

        auto l = lower_bound(nums.begin(), nums.end(), k);
        auto r = upper_bound(nums.begin(), nums.end(), k);

        return r - l;
    }
};
```

(双指针扫描) O(n)O(n)
用两个指针分别从首尾开始，往中间扫描。扫描时保证第一个指针前面的数都是奇数，第二个指针后面的数都是偶数。

每次迭代时需要进行的操作：

第一个指针一直往后走，直到遇到第一个偶数为止；
第二个指针一直往前走，直到遇到第一个奇数为止；
交换两个指针指向的位置上的数，再进入下一层迭代，直到两个指针相遇为止；
时间复杂度
当两个指针相遇时，走过的总路程长度是 nn，所以时间复杂度是 O(n)O(n)。

C++ 代码
```
class Solution {
public:
    void reOrderArray(vector<int> &array) {
         int l = 0, r = array.size() - 1;
         while (l < r) {
             while (l < r && array[l] % 2 == 1) l ++ ;
             while (l < r && array[r] % 2 == 0) r -- ;
             if (l < r) swap(array[l], array[r]);
         }
    }
};
```

(遍历链表) O(n)O(n)
单链表只能从前往后遍历，不能从后往前遍历。 因此我们先从前往后遍历一遍输入的链表，将结果记录在答案数组中。最后再将得到的数组逆序即可。
时间复杂度分析
链表和答案数组仅被遍历了常数次，所以总时间复杂度是 O(n)O(n)。

C++ 代码
```
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> printListReversingly(ListNode* head) {
        vector<int> res;
        while (head) {
            res.push_back(head->val);
            head = head->next;
        }
        return vector<int>(res.rbegin(), res.rend());
    }
};
```